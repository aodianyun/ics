	exports.Create = function (app){		return new Mod( app );	}		function Mod (app){		this.app_ = app;		this.uinMap_ = {};		this.idMap_ = {};				this.scope_ = "demo";		this.id_ = 1;	}		Mod.prototype.OnClientIn = function ( id, addr ){		console.log("\n有新用户连接，id:",id,"地址:",addr);		console.log("\n服务器所有演示默认的都是返回成功，功能仅供体验\n");		this.idMap_[id] = { addr:addr,nick:"游客" + this.id_ ,uin:this.id_};		this.id_ ++;		this.AddScope( id,this.scope_);		this.SendUserNum();		var pkt = {			cmd:"node",			uin:this.idMap_[id].uin,			nick:this.idMap_[id].nick,		}		this.SendToClient( id,pkt);	}		Mod.prototype.OnClientData = function ( id, data ){		//console.log("recieve data from client",id,data);		if ( typeof(data) != "object" )			return ;				if( data.cmd == "chatText" ){			console.log("操作协议:chatText");			console.log("收到发送群聊信息:",data.text);			console.log("正在调用通讯库的群发功能发送聊天信息！");			return this.SendByScope( this.scope_,data);		}else if( data.cmd == "modNick" ){			this.idMap_[id].nick = data.nick;			return this.SendToClient( id,data);		}else if(data.cmd == "REG"){			console.log("操作协议:REG");			console.log("收到用户注册信息:用户名:",data.nick,"密码:",data.passwd);			console.log("正在处理用户注册的逻辑操作，请稍等！");			var pkt = {				cmd:"REG",				rs:"success"			}			console.log("处理成功,已返回处理结果")			return this.SendToClient(id,pkt);		}else if(data.cmd == "LOGIN"){			console.log("操作协议:LOGIN");			console.log("收到用户登录信息:用户名:",data.nick,"密码:",data.passwd);			console.log("正在处理用户登录的逻辑操作，请稍等！");			var pkt = {				cmd:"LOGIN",				rs:"success"			}			console.log("处理成功,已返回处理结果")			return this.SendToClient(id,pkt);		}						}		Mod.prototype.OnClientOut = function ( id  ){		//console.log("client login out",id);		delete this.idMap_[id];		this.DelScope( id,this.scope_ );		this.SendUserNum();	}			Mod.prototype.OnOhterAppData = function ( id, addr ){			}		Mod.prototype.SendToClient = function (id,data){				this.app_.SendToClient(id,data);	}		Mod.prototype.CloseClient = function (id){		this.app_.CloseClient(id);	}	Mod.prototype.AddScope = function (id,scope){		this.app_.AddScope(scope,id);	}	Mod.prototype.DelScope = function (id,scope){		this.app_.DelScope(scope,id);	}	Mod.prototype.SendByScope = function (scope,data){		this.app_.SendToScope(scope,data);	}		Mod.prototype.SendUserNum = function (){		var num = 0;		for( var n in this.idMap_ )			num ++;		var pkt = {			cmd:"userNum",			num:num,		}		return this.SendByScope( this.scope_,pkt );	}