var coder = require("./coder");
var util = require("util");
exports.MAppCloseClient = MAppCloseClient;

exports.MAppClientIn = MAppClientIn;
exports.MAppClientOut = MAppClientOut;
exports.MAppScopeOp = MAppScopeOp;
exports.MAppScopeData = MAppScopeData;
exports.MAppClientData = MAppClientData;
exports.MAppBroadCast = MAppBroadCast;
exports.MAppOtherAppData = MAppOtherAppData;
coder.RegistMessage(coder.TAG.ADCLOUD_MESSAGE_TAG_APP_CLOSE_CLIENT,MAppCloseClient);
coder.RegistMessage(coder.TAG.ADCLOUD_MESSAGE_TAG_APP_IN,MAppClientIn);
coder.RegistMessage(coder.TAG.ADCLOUD_MESSAGE_TAG_APP_OUT,MAppClientOut);
coder.RegistMessage(coder.TAG.ADCLOUD_MESSAGE_TAG_APP_SCOPE_OP,MAppScopeOp);
coder.RegistMessage(coder.TAG.ADCLOUD_MESSAGE_TAG_APP_SCOPE_DATA,MAppScopeData);
coder.RegistMessage(coder.TAG.ADCLOUD_MESSAGE_TAG_APP_MSG,MAppClientData);
coder.RegistMessage(coder.TAG.ADCLOUD_MESSAGE_TAG_APP_OTHER_APP_DATA,MAppOtherAppData);
coder.RegistMessage(coder.TAG.ADCLOUD_MESSAGE_TAG_APP_BROADCAST,MAppBroadCast);
function MAppBace(tag,gid,cid){
	coder.Message.call(this,tag);
	this.gate_id = gid;
	this.client_id = cid;
}
util.inherits(MAppBace, coder.Message);
MAppBace.prototype.BodyLength = function(){
	var size = Buffer.byteLength(this.gate_id)  + 1 + 4;
	return size;
}

MAppBace.prototype.EncodeBody= function(buf_writer){
	buf_writer.WriteStringAscii(this.gate_id);
	buf_writer.WriteUInt32(this.client_id);
}

MAppBace.prototype.DecodeBody = function(buf_reader){
	this.gate_id = buf_reader.ReadStringAscii();
	this.client_id = buf_reader.ReadUInt32();
}


function MAppCloseClient(gid,cid) {
	MAppBace.call(this,coder.TAG.ADCLOUD_MESSAGE_TAG_APP_CLOSE_CLIENT,gid,cid);
	this.gate_id = gid;
	this.client_id = cid;

}
util.inherits(MAppCloseClient,MAppBace);

function MAppClientIn(gid,cid) {
	coder.Message.call(this,coder.TAG.ADCLOUD_MESSAGE_TAG_APP_IN);
	this.gate_id = gid;
	this.client_id = cid;
	this.addr = "";
}
util.inherits(MAppClientIn, coder.Message);
MAppClientIn.prototype.BodyLength = function(){
	var size = Buffer.byteLength(this.gate_id)  + 1 + 4 +  Buffer.byteLength(this.addr)  + 1;
	return size;
}

MAppClientIn.prototype.EncodeBody= function(buf_writer){
	buf_writer.WriteStringAscii(this.gate_id);
	buf_writer.WriteUInt32(this.client_id);
	buf_writer.WriteUInt32(this.addr);
}

MAppClientIn.prototype.DecodeBody = function(buf_reader){
	this.gate_id = buf_reader.ReadStringAscii();
	this.client_id = buf_reader.ReadUInt32();
	this.addr = buf_reader.ReadStringAscii();
}
function MAppClientOut(gid,cid) {
	MAppBace.call(this,coder.TAG.ADCLOUD_MESSAGE_TAG_APP_OUT,gid,cid);
	this.gate_id = gid;
	this.client_id = cid;
}
util.inherits(MAppClientOut,MAppBace);




function MAppScopeOp(gid,cid,badd,scope) {
	coder.Message.call(this,coder.TAG.ADCLOUD_MESSAGE_TAG_APP_SCOPE_OP);
	this.gate_id = gid;
	this.client_id = cid;
	this.badd = badd;
	this.scope = scope;
}
util.inherits(MAppScopeOp, coder.Message);

MAppScopeOp.prototype.BodyLength = function(){
	var size = Buffer.byteLength(this.gate_id)  + 1 + 4 + 1 + Buffer.byteLength(this.scope) + 1;
	return size;
}

MAppScopeOp.prototype.EncodeBody= function(buf_writer){
	buf_writer.WriteStringAscii(this.gate_id);
	buf_writer.WriteUInt32(this.client_id);
	buf_writer.WriteBool(this.badd);
	buf_writer.WriteStringAscii(this.scope);
}

MAppScopeOp.prototype.DecodeBody = function(buf_reader){
	this.gate_id = buf_reader.ReadStringAscii();
	this.client_id = buf_reader.ReadUInt32();
	this.client_id = buf_reader.ReadBool();
	this.scope = buf_reader.ReadStringAscii();
}

function MAppScopeData(scope,buf) {
	coder.Message.call(this,coder.TAG.ADCLOUD_MESSAGE_TAG_APP_SCOPE_DATA);
	this.scope = scope;
	this.buf_ = buf;
}
util.inherits(MAppScopeData, coder.Message);

MAppScopeData.prototype.BodyLength = function(){
	var size =  1 + Buffer.byteLength(this.scope) + this.buf_.length;
	return size;
}

MAppScopeData.prototype.EncodeBody= function(buf_writer){
	buf_writer.WriteStringAscii(this.scope);
	if(this.buf_){
		buf_writer.WriteBuffer(this.buf_);
	}
}

MAppScopeData.prototype.DecodeBody = function(buf_reader){
	this.scope = buf_reader.ReadStringAscii();
	this.buf_ = buf_reader.GetDataBuffer();
	buf_reader.Grow(this.buf_.length);
}
function MAppBroadCast(buf) {
	coder.Message.call(this,coder.TAG.ADCLOUD_MESSAGE_TAG_APP_BROADCAST);
	this.buf_ = buf;
}
util.inherits(MAppBroadCast, coder.Message);

MAppBroadCast.prototype.BodyLength = function(){
	var size =  this.buf_.length;
	return size;
}

MAppBroadCast.prototype.EncodeBody= function(buf_writer){
	if(this.buf_){
		buf_writer.WriteBuffer(this.buf_);
	}
}
MAppBroadCast.prototype.DecodeBody = function(buf_reader){
	this.buf_ = buf_reader.GetDataBuffer();
	buf_reader.Grow(this.buf_.length);
}




function MAppClientData(gid,cid,buf){
	coder.Message.call(this,coder.TAG.ADCLOUD_MESSAGE_TAG_APP_MSG);
	this.gate_id = gid;
	this.client_id = cid;
	this.buf_ = buf;
}
util.inherits(MAppClientData, coder.Message);
MAppClientData.prototype.BodyLength = function(){
	var size = Buffer.byteLength(this.gate_id)  + 1 + 4 + this.buf_.length;
	return size;
}

MAppClientData.prototype.EncodeBody= function(buf_writer){
	buf_writer.WriteStringAscii(this.gate_id);
	buf_writer.WriteUInt32(this.client_id);
	if(this.buf_){
		buf_writer.WriteBuffer(this.buf_);
	}
}

MAppClientData.prototype.DecodeBody = function(buf_reader){
	this.gate_id = buf_reader.ReadStringAscii();
	this.client_id = buf_reader.ReadUInt32();
	this.buf_ = buf_reader.GetDataBuffer();
	buf_reader.Grow(this.buf_.length);
}

function MAppOtherAppData(appid,buf) {
	coder.Message.call(this,coder.TAG.ADCLOUD_MESSAGE_TAG_APP_OTHER_APP_DATA);
	this.appid = appid;
	this.buf_ = buf;
}
util.inherits(MAppOtherAppData, coder.Message);

MAppOtherAppData.prototype.BodyLength = function(){
	var size =  1 + Buffer.byteLength(this.appid) + this.buf_.length;
	return size;
}

MAppOtherAppData.prototype.EncodeBody= function(buf_writer){
	buf_writer.WriteStringAscii(this.appid);
	if(this.buf_){
		buf_writer.WriteBuffer(this.buf_);
	}
}

MAppOtherAppData.prototype.DecodeBody = function(buf_reader){
	this.appid = buf_reader.ReadStringAscii();
	var buf = buf_reader.GetDataBuffer();
	if(buf.length  == 0){
		return;
	}
	this.buf_ = buf;
	buf_reader.Grow(buf.length);
}